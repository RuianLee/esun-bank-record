2023/07/31 ----------------------------
1.-------------------------------------
CBDC: 中央銀行數位貨幣 
  https://www.cbc.gov.tw/tw/dl-177989-65adf5960c2b4e26902bd881570e68c8.html
從這個點，對加密貨幣的領域有一點感興趣，可能之後 web + 機率 + 加密貨幣
也從工作的觀點，感覺其實在這裡持續學習 整體開發流程以及相關知識，慢慢擴展專業領域也不錯
  https://ethereum.org/en/developers/tutorials/hello-world-smart-contract/
  上面的網址，可以讓你簡單入門，智能合約
2.-------------------------------------
可以想一個方法，可以盤點自己的前端元件，讓自己快速把功能組合出來
或是可以有文件紀錄前端元件相關的組成元素，幫助我們快速收集靈感實作出新的元件
EX: 欄位之間的連動、欄位排版
也突然想到，之後如果要開發發卡，可以大概把 a07 類似的畫面拿來改程式
3.-------------------------------------
FreeForm 發想: 用於軟體工程
1. 可以透過 FreeForm 把 網頁之間的 link 方式 show 出來，讓網站的設計看起來更立體
2. FreeForm 在軟體學習任務上，可以扮演的角色
    1. 提供可視化圖示以及 mind map，讓學習者可以根據 mindMap 來快速複習
    2. 可以在每個主題放入關鍵字，或是關鍵問題，讓了解概念區塊的綱要與重要議題 => Key word & Question
    補: 如果是課程內容，我會記錄在 noion 裡面，因為方便攜帶隨時複習，如果是抽離出來的閱讀資源或文章我會用 goodnote 撰寫
        notion: 負責管理進度與課程知識(限縮認知範圍，加強使用性) FreeForm:負責概要圖與講解練習(概觀與講解提示) goodnote 深入各別知識進行理解(深入討論與補充)
3. 學習流程:
    1. 聽課過程: 講到一個段落結束，先用 FreeForm 畫一下，重複這個過程直到聽完 => 先不必在意敘述，重點在於在暫存認知可以講述跟實際畫出來 (產出: 圖片、大流程)
    2. 聽完課程且知識了解後: 將文字敘述裡面好的敘述篩選出來，列出課程內的重要議題(問題)，與對應的敘述，整理成筆記 (產出: 課程內重大議題: 大標題問題、課程內筆記: 實際問題的答案與關鍵字)
    3. 在 freeForm 上面補上關鍵字與關鍵問題方便了解概要
    4. 透過概要講一次，並複習不懂的(不會的在 notion 上面畫記)
    補: 有興趣的議題，把相關文章與資源變成 pdf 檔案，我們將會在 goodnote 裡面進行研究與文獻註解
4.-------------------------------------
玉山業務邏輯的蒐集:
開發(前端、後端等常用程式)、業務累積(日誌、業務文件)、開會討論、業務分享
oneNote: 前端、後端等常用程式累積、業務梳理(word負責做細節敘述，這裡做細節特徵敘述)
word: SA、SD文件(用oneNote做梳理)、日誌(開會討論、簡單方便的紀錄)、相關想深入的內容(可當作筆記區塊，會有文件來參考這裡)
excel: 開發或管理盤點的表單、開發加速工具
ppt: 報告、流程紀錄(加強覆用性、快速恢復記憶)
draw.io: 做概觀(關鍵字與關鍵敘述)與流程的呈現
5.------------------------------------
https://buzzorange.com/techorange/2016/05/12/experienced-programmers-use-google-frequently/
這個還有趣的，這裡說明了當你 google 一次時，你可以寫幾行 code
但這邊為什麼我想搜尋這個呢? 其實我是希望可以在上課程的時候或是在寫專案的時候把 code 養起來
1. try out all the examples 、 mini-projects which you come across while learning the language keep those little codes in a single directory.
   (你可以把你實作過的功能例子或小專案都放在一個目錄下面，之後要查詢就可以直接用 IDE 到目錄底下查詢)
2. Later, when you are done with learning, and finally working on something big, you'll forget something about the language, say a construct in the language:
   (後來，當你完成學習並最終從事一些大的事情時，你一定會忘記一些關於該語言的一些東西，比如說該語言中的一個結構)
3. 如果你需要某個語法 或是結構的時候，打入關鍵字，此時就可以找出你所需要的部分，複製貼上直接修改
4. 如果你需要某個類似的功能，你可以把程式跑起來，看看哪些部分是類似的功能，直接把那邊的程式建構拿來套用
補充:  https://www.quora.com/What-is-the-best-way-to-take-notes-when-learning-a-computer-programming-language
many people have created websites, books, 1-page cheatsheets, quick reference guides etc.
It is not worthwhile creating your own; just maintain a list of links/references/books which are good.
一般來說，除非您正在學習一些真正新的或秘密的語言，否則許多人已經創建了網站、書籍、一頁備忘單、快速參考指南等。您自己創建是不值得的；只需維護一個好的鏈接/參考文獻/書籍列表即可
只需下載一份這樣的快速參考指南並在其上進行註釋/修改即可。但請記住盡可能保持簡潔和簡潔。最終你會學習相當多的語言（在這個過程中，忘記所有的語言）。您不想翻閱數十頁來找出簡單子例程聲明的語法。
通常因為網路上面的程式文件已經非常齊全，我們要建立的快速參考應該要是，這個結構與語法區塊在建構的應用程式當中，有甚麼特徵是可以讓我更快速定位他在應用系統中的功能
就很像今天有一本化學課本你知道所有化學材料的特性，但是想要製造甚麼產品，應該要根據過去類似性質的產品當中，回推加過甚麼元素才會是有效率的方式
結論: 
養 CODE的方法: 
  1. 加入常用的 CODE SNIPPET(EX: 不屬於任何功能的程式(或通用的): 偏程式面的編碼 EX: 把表單跟 data連結一起，這是程式必要操作，但對業務推進毫無幫助的)
  2. 建立目錄，把過去開發的程式放進去 => 1. 可以直接用 IDE搜尋結構、語法 2. 可以跑程式找功能 3. 可以幫助你對程式碼在系統中的用處更了解
  3. 甚至更強的方法是在程式碼的時候，可以先在區塊上方，簡單敘述程式的功能(偏向使用者的簡單功能說明)，這樣你找尋的時候，可以更快進入情境
甚麼時候該寫筆記:
  1. 要解釋原理的時候可以放程式碼，不然一般不要去記錄簡單的語法，只需要紀錄可幫助你理解工作原理的敘述 與 程式碼 就好 => 要理解的，要概覽的，要流程的，非細節的
  2. 延續第一點: 幫助理解的話可以做 思維導圖、演算法流程、編寫代碼和構建項目的紀錄文件
6.------------------------------------
我想到前端這邊我該做些甚麼，可以讓我的知識落地，而且是基礎很強的，我們可以先解決知識落地的問題
解決辦法: Build your own projects and/or help on Open Source => 建構自己的專案或是為開源付出
衝突: 可能我的能力或今天學習到的東西沒辦法累積成一個專案怎麼辦?
1. 根據今天的學習做一些 exercise => 做一個可能50~100行的練習，把今天的內容產生成品就好了 => 至少把程式碼變現成實體
2. 不要滿足於甚麼都知道的安全感下面開發，當安全感要素消失你會不知所措
2023/08/07 ----------------------------
1. 跟著一個基本的教程走，然後找一些練習題練習一下，可以記錄在 excel 上面，再找時間撰寫
   https:ithelp.ithome.com.tw/articles/10202326
   目前想到的學習辦法是嘗試使用 vanilla javascript ，當東西大到無法管理的時候，透過框架找到 aha moment
   或是當發現自己的 code 或 功能非常簡陋的時候，嘗試一些套件並從中吸取一些相關的設計來用在自己的 code 上面
2. 為什麼要了解原理與 vanilla js 是因為如果過度依賴套件，沒有把基礎打穩，容易導致我們無法透過強大的基礎，設計出問題的解決方案
3. 可以搭配學習 google app script 來快速解決現實生活中的問題
   https://spreadsheet.dev/google-apps-script-tutorial
   https://spreadsheet.dev/custom-menus-in-google-sheets
4. 建立東西，如果有教程可以先大概列出，你可以在這個專案上面學到甚麼
   https://spreadsheet.dev/tic-tac-toe-in-google-sheets  可以拿這格 OOXX 的來練習
5. 昨天在影片中有看到 keep codeing daily 的系統裡面，有一個讓自己可以按照目前當下體力、時間允許下對應的 coding 練習清單，但要維護有點麻煩說
   能不能透過 google 表單，讓我逐步填入可以做的項目以及對應的時間，並且讓我在想做事的時候可以一目了然
   https://dev.to/andrewbaisden/50-cool-web-and-mobile-project-ideas-for-2022-1flj
2023/08/08 ---------------------------
可以加在家裡的 vscode 上面
https://ithelp.ithome.com.tw/articles/10211005
1.------------------------------------
回去可以試看看，把 api 包起來用的跟玉山前端一樣(搭配team+裡面的文件)，這樣之後要打 api 就方便多了
https://www.labnol.org/tech-courses-200403
https://ithelp.ithome.com.tw/articles/10193164
https://developers.google.com/apps-script/reference/url-fetch/http-response
目前想到一個，可以透過 fb 追蹤社團，如果有出現想要買的東西就可以直接留言 或是 可以追蹤自己在社團裡面發的文觀看量與按讚量
又想到一個，我可以接觸很多各行各業的然後把需求列出來，打造可以自動化的商品
2.------------------------------------
google app script 資源
trigger:
https://levelup.gitconnected.com/mastering-triggers-and-automate-workflows-in-google-apps-script-b6d76d1d12b0
How to create your own workflow using chatGPT:
https://sheetaki.com/chatgpt-to-automate-workflow-in-google-sheets/
如何透過 GAS 建立一個 workflow:
https://techstreams.medium.com/g-suite-solutions-apps-script-powered-workflow-automation-4cb715ea5d0b
快速建立一個GAS專案:
https://github.com/labnol/apps-script-starter
裡面有一堆教程:
https://subjectguides.york.ac.uk/coding/apps-script
一個專案的誕生:
https://www.freecodecamp.org/news/how-to-come-up-with-coding-project-ideas/
2023/08/10 ---------------------------
如何練習 layout?
https://flexboxfroggy.com/   練習 flexbox的網站
https://www.reddit.com/r/Frontend/comments/t786gs/how_to_get_confident_in_css_layouts/     how to be confident in layout?
------------------------------------
可以透過 notion 的 web cliper 功能，把好用的網站或是好文章觀念的網站與資源整合出來，幫助你在下次可以更好引用與尋找
EX: 我找了很多關於 GAS and Google appSheet的資源，我希望做完 美容小專案之後，可以把後續的相關資源保存下來
----雖然沒有要繼續往 Google 周邊挖，但我希望可以再需要類似工具時，還是可以實作下來(真正變成我的 Tech stack)
------------------------------------
練習前端: 可以先從把網站的 layout 建出來開始layout，慢慢把習慣建立起來
https://gridbyexample.com/
2023/08/11 ---------------------------
https://www.reddit.com/r/Frontend/comments/qkpieu/recommendations_for_project_based_learning/
https://github.com/strongdan/beginner-js-projects
https://www.knowledgehut.com/blog/web-development/front-end-web-development-projects
https://github.com/practical-tutorials/project-based-learning
https://github.com/bradtraversy/50projects50days
https://www.freecodecamp.org/news/javascript-projects-for-beginners/
https://dribbble.com/shots/21412313-X-Leap-website-for-blockchain-based-payment-platform 挖靠，超酷的啦
2023/08/14 ---------------------------
---------------------------
1. 內部系統可以透過 ui-library + 後端，快速建立內部系統
2. 如果是對外的網頁或商業模型，則是由 設計師來畫出設計圖並由前端工程師時做出來，所以工作內容不太一樣
3. 如果要練習的話，目前的技能堆比較符合 1.的部分，2.的部分還要找設計師或是去網路上找圖檔來練習 => 先練習如何快速建立系統，慢慢練習如何實作設計圖
4. https://www.smashingmagazine.com/2022/05/you-dont-need-ui-framework/ => 這邊文章充分講到關於前端人員該注意的部分
5. ui-library for 內部系統快速建立 + 快速完成 demo , 自建構 for product and 客製化網站
6. 如果發現 vanilla 的部分學得差不多(大概知道怎麼運作的話)，可以慢慢回到vue的 ui-library 來做產品
7. 若是這個產品很喜歡，想要有跟客製化的設計，就用 vue的 radix-vue 做一些比較客製化的設定
自建構的練習方式: 
1. 在基礎上面努力練習 html css
2. 去網站上面找簡單的設計來 clone
3. 慢慢建構屬於自己的替代元件 => 讓我們可以在 ui 元件沒有支援的情況下，建立符合需求的元件
---------------------------
為了使我們在使用框架或撰寫程式上出現問題，所以我們也必須對 JS 有深入的認識，但這些抽象概念是沒辦法幫我們組成專案
但常常可以幫我們解決問題，我們可以從一些 JS 的面試題出發慢慢去理解，這樣也比較有目的性
---------------------------
https://dev.to/thefierycoder/10-frontend-projects-to-take-your-coding-skills-to-the-next-level-7ae
https://www.thinktecture.com/en/web-components/native-web-components-without-framework/
上面都是前端的連結
https://ithelp.ithome.com.tw/articles/10265721 這是 spring boot 部分的連結
目前的想法是都包，但還是會專注在前端，如果有需要會到後端實作一下
今天有了解到如何渲染了，感覺學習方式還是會繼續做小專案，慢慢就會感覺到拆解出來的東西，可以到 MDN 裡面把機制搞清楚~~~
還包含如何透過 vanilla js 來包裝 component，應該會蠻有趣的，真的是把底層慢慢摸再慢慢回到框架
-------------------------------------------------------------------------------------- 2023/08/17
DOM（Document Object Model）是一種獨立於程式語言的概念，任何程式都可以實作
它能將文件中的標籤轉換成 node 或 object 的形式，並以樹狀結構的方式組織起來
使開發者能夠使用實作的程式語言來存取和修改轉換過的元素和內容(object 裡面的 memeber)。
在 Web 開發中，通常指的是 JavaScript 中的 DOM。
--------------------------------------------------------------------------------------
DOM Tree 是 DOM 概念的一部分
它是指將一個網頁文件的各個元素按照文檔中的層次關係組織而成的樹狀結構。
而樹狀結構反映了網頁文件的層次結構，包括從根元素開始，通過子元素、不斷迭代直到最末端的元素
樹中的每個節點代表著文檔中的一個元素（例如標籤、屬性、文字等），有了這個樹狀結構
可以通過程式的算法來訪問，達到特定目的的修改與操作。
--------------------------------------------------------------------------------------
總結來說，DOM 是一種文檔傳換成程式可操作元素的概念
而 DOM Tree 則是 DOM 在實際應用中所形成的具體結構，幫助透過網頁元素的層次結構關係
來定位網頁中特定的位置，達到特定目的的修改與操作。
--------------------------------------------------------------------------------------
目的: 動態創建、訪問和控制以及刪除 HTML 元素 => DOM API是這些動作的集合
重點: 
    - 樹狀結構當中哪些是 inline 哪些是 block，就可以看出子元素對畫面的渲染效果
    - 在開發的時候，可以稍微想一下， DOM 要如何操作，搭配ELEMENT物件本身屬性與方法
      如果完成想要的功能，通常不會從最底建構，可能一個 ELEMENT 就是一個 Compoment
--------------------------------------------------------------------------------------
Document API（有時也稱為 DOM API）允許您以任何您想要的方式修改 DOM 樹。
1. 能夠從頭開始創建任何 HTML 或 XML 文檔
2. 更改給定 HTML 或 XML 文檔的任何內容(文字 textContent 也算一個元素)
3. 可以使用 JavaScript 來編輯文檔的 DOM，與因為轉換成可操作物件(標籤物件)
   就可訪問包括全局物件與 HTML文檔裡轉換物件的屬性。
--------------------------------------------------------------------------------------
----------------------------------------- 2023/08/23
html and css 的練習
https://www.geeksforgeeks.org/top-10-projects-for-beginners-to-practice-html-and-css-skills/ 純 css 與 html
可以透過 notion 的 web cliper 功能，把好用的網站或是好文章觀念的網站與資源整合出來，幫助你在下次可以更好引用與尋找
EX: 我找了很多關於 GAS and Google appSheet的資源，我希望做完 美容小專案之後，可以把後續的相關資源保存下來
----雖然沒有要繼續往 Google 周邊挖，但我希望可以再需要類似工具時，還是可以實作下來(真正變成我的 Tech stack)
------------------------------------
練習前端: 可以先從把網站的 layout 建出來開始layout，慢慢把習慣建立起來
https://gridbyexample.com/
2023/08/11 ---------------------------
https://www.reddit.com/r/Frontend/comments/qkpieu/recommendations_for_project_based_learning/
https://github.com/strongdan/beginner-js-projects
https://www.knowledgehut.com/blog/web-development/front-end-web-development-projects
https://github.com/practical-tutorials/project-based-learning
https://github.com/bradtraversy/50projects50days
https://www.freecodecamp.org/news/javascript-projects-for-beginners/
https://dribbble.com/shots/21412313-X-Leap-website-for-blockchain-based-payment-platform 挖靠，超酷的啦
2023/08/14 ---------------------------
---------------------------
1. 內部系統可以透過 ui-library + 後端，快速建立內部系統
2. 如果是對外的網頁或商業模型，則是由 設計師來畫出設計圖並由前端工程師時做出來，所以工作內容不太一樣
3. 如果要練習的話，目前的技能堆比較符合 1.的部分，2.的部分還要找設計師或是去網路上找圖檔來練習 => 先練習如何快速建立系統，慢慢練習如何實作設計圖
4. https://www.smashingmagazine.com/2022/05/you-dont-need-ui-framework/ => 這邊文章充分講到關於前端人員該注意的部分
5. ui-library for 內部系統快速建立 + 快速完成 demo , 自建構 for product and 客製化網站
6. 如果發現 vanilla 的部分學得差不多(大概知道怎麼運作的話)，可以慢慢回到vue的 ui-library 來做產品
7. 若是這個產品很喜歡，想要有跟客製化的設計，就用 vue的 radix-vue 做一些比較客製化的設定
自建構的練習方式: 
1. 在基礎上面努力練習 html css
2. 去網站上面找簡單的設計來 clone
3. 慢慢建構屬於自己的替代元件 => 讓我們可以在 ui 元件沒有支援的情況下，建立符合需求的元件
---------------------------
為了使我們在使用框架或撰寫程式上出現問題，所以我們也必須對 JS 有深入的認識，但這些抽象概念是沒辦法幫我們組成專案
但常常可以幫我們解決問題，我們可以從一些 JS 的面試題出發慢慢去理解，這樣也比較有目的性
---------------------------
https://dev.to/thefierycoder/10-frontend-projects-to-take-your-coding-skills-to-the-next-level-7ae
https://www.thinktecture.com/en/web-components/native-web-components-without-framework/
上面都是前端的連結
https://ithelp.ithome.com.tw/articles/10265721 這是 spring boot 部分的連結
目前的想法是都包，但還是會專注在前端，如果有需要會到後端實作一下
今天有了解到如何渲染了，感覺學習方式還是會繼續做小專案，慢慢就會感覺到拆解出來的東西，可以到 MDN 裡面把機制搞清楚~~~
還包含如何透過 vanilla js 來包裝 component，應該會蠻有趣的，真的是把底層慢慢摸再慢慢回到框架
-------------------------------------------------------------------------------------- 2023/08/17
DOM（Document Object Model）是一種獨立於程式語言的概念，任何程式都可以實作
它能將文件中的標籤轉換成 node 或 object 的形式，並以樹狀結構的方式組織起來
使開發者能夠使用實作的程式語言來存取和修改轉換過的元素和內容(object 裡面的 memeber)。
在 Web 開發中，通常指的是 JavaScript 中的 DOM。
--------------------------------------------------------------------------------------
DOM Tree 是 DOM 概念的一部分
它是指將一個網頁文件的各個元素按照文檔中的層次關係組織而成的樹狀結構。
而樹狀結構反映了網頁文件的層次結構，包括從根元素開始，通過子元素、不斷迭代直到最末端的元素
樹中的每個節點代表著文檔中的一個元素（例如標籤、屬性、文字等），有了這個樹狀結構
可以通過程式的算法來訪問，達到特定目的的修改與操作。
--------------------------------------------------------------------------------------
總結來說，DOM 是一種文檔傳換成程式可操作元素的概念
而 DOM Tree 則是 DOM 在實際應用中所形成的具體結構，幫助透過網頁元素的層次結構關係
來定位網頁中特定的位置，達到特定目的的修改與操作。
--------------------------------------------------------------------------------------
目的: 動態創建、訪問和控制以及刪除 HTML 元素 => DOM API是這些動作的集合
重點: 
    - 樹狀結構當中哪些是 inline 哪些是 block，就可以看出子元素對畫面的渲染效果
    - 在開發的時候，可以稍微想一下， DOM 要如何操作，搭配ELEMENT物件本身屬性與方法
      如果完成想要的功能，通常不會從最底建構，可能一個 ELEMENT 就是一個 Compoment
--------------------------------------------------------------------------------------
Document API（有時也稱為 DOM API）允許您以任何您想要的方式修改 DOM 樹。
1. 能夠從頭開始創建任何 HTML 或 XML 文檔
2. 更改給定 HTML 或 XML 文檔的任何內容(文字 textContent 也算一個元素)
3. 可以使用 JavaScript 來編輯文檔的 DOM，與因為轉換成可操作物件(標籤物件)
   就可訪問包括全局物件與 HTML文檔裡轉換物件的屬性。
--------------------------------------------------------------------------------------
----------------------------------------- 2023/08/23
html and css 的練習
https://www.geeksforgeeks.org/top-10-projects-for-beginners-to-practice-html-and-css-skills/ 純 css 與 html
https:www.geeksforgeeks.org/top-10-front-end-web-development-projects-for-beginners/可以透過 notion 的 web cliper 功能，把好用的網站或是好文章觀念的網站與資源整合出來，幫助你在下次可以更好引用與尋找
EX: 我找了很多關於 GAS and Google appSheet的資源，我希望做完 美容小專案之後，可以把後續的相關資源保存下來
----雖然沒有要繼續往 Google 周邊挖，但我希望可以再需要類似工具時，還是可以實作下來(真正變成我的 Tech stack)
------------------------------------
練習前端: 可以先從把網站的 layout 建出來開始layout，慢慢把習慣建立起來
https://gridbyexample.com/
2023/08/11 ---------------------------
https://www.reddit.com/r/Frontend/comments/qkpieu/recommendations_for_project_based_learning/
https://github.com/strongdan/beginner-js-projects
https://www.knowledgehut.com/blog/web-development/front-end-web-development-projects
https://github.com/practical-tutorials/project-based-learning
https://github.com/bradtraversy/50projects50days
https://www.freecodecamp.org/news/javascript-projects-for-beginners/
https://dribbble.com/shots/21412313-X-Leap-website-for-blockchain-based-payment-platform 挖靠，超酷的啦
2023/08/14 ---------------------------
---------------------------
1. 內部系統可以透過 ui-library + 後端，快速建立內部系統
2. 如果是對外的網頁或商業模型，則是由 設計師來畫出設計圖並由前端工程師時做出來，所以工作內容不太一樣
3. 如果要練習的話，目前的技能堆比較符合 1.的部分，2.的部分還要找設計師或是去網路上找圖檔來練習 => 先練習如何快速建立系統，慢慢練習如何實作設計圖
4. https://www.smashingmagazine.com/2022/05/you-dont-need-ui-framework/ => 這邊文章充分講到關於前端人員該注意的部分
5. ui-library for 內部系統快速建立 + 快速完成 demo , 自建構 for product and 客製化網站
6. 如果發現 vanilla 的部分學得差不多(大概知道怎麼運作的話)，可以慢慢回到vue的 ui-library 來做產品
7. 若是這個產品很喜歡，想要有跟客製化的設計，就用 vue的 radix-vue 做一些比較客製化的設定
自建構的練習方式: 
1. 在基礎上面努力練習 html css
2. 去網站上面找簡單的設計來 clone
3. 慢慢建構屬於自己的替代元件 => 讓我們可以在 ui 元件沒有支援的情況下，建立符合需求的元件
---------------------------
為了使我們在使用框架或撰寫程式上出現問題，所以我們也必須對 JS 有深入的認識，但這些抽象概念是沒辦法幫我們組成專案
但常常可以幫我們解決問題，我們可以從一些 JS 的面試題出發慢慢去理解，這樣也比較有目的性
---------------------------
https://dev.to/thefierycoder/10-frontend-projects-to-take-your-coding-skills-to-the-next-level-7ae
https://www.thinktecture.com/en/web-components/native-web-components-without-framework/
上面都是前端的連結
https://ithelp.ithome.com.tw/articles/10265721 這是 spring boot 部分的連結
目前的想法是都包，但還是會專注在前端，如果有需要會到後端實作一下
今天有了解到如何渲染了，感覺學習方式還是會繼續做小專案，慢慢就會感覺到拆解出來的東西，可以到 MDN 裡面把機制搞清楚~~~
還包含如何透過 vanilla js 來包裝 component，應該會蠻有趣的，真的是把底層慢慢摸再慢慢回到框架
-------------------------------------------------------------------------------------- 2023/08/17
DOM（Document Object Model）是一種獨立於程式語言的概念，任何程式都可以實作
它能將文件中的標籤轉換成 node 或 object 的形式，並以樹狀結構的方式組織起來
使開發者能夠使用實作的程式語言來存取和修改轉換過的元素和內容(object 裡面的 memeber)。
在 Web 開發中，通常指的是 JavaScript 中的 DOM。
--------------------------------------------------------------------------------------
DOM Tree 是 DOM 概念的一部分
它是指將一個網頁文件的各個元素按照文檔中的層次關係組織而成的樹狀結構。
而樹狀結構反映了網頁文件的層次結構，包括從根元素開始，通過子元素、不斷迭代直到最末端的元素
樹中的每個節點代表著文檔中的一個元素（例如標籤、屬性、文字等），有了這個樹狀結構
可以通過程式的算法來訪問，達到特定目的的修改與操作。
--------------------------------------------------------------------------------------
總結來說，DOM 是一種文檔傳換成程式可操作元素的概念
而 DOM Tree 則是 DOM 在實際應用中所形成的具體結構，幫助透過網頁元素的層次結構關係
來定位網頁中特定的位置，達到特定目的的修改與操作。
--------------------------------------------------------------------------------------
目的: 動態創建、訪問和控制以及刪除 HTML 元素 => DOM API是這些動作的集合
重點: 
    - 樹狀結構當中哪些是 inline 哪些是 block，就可以看出子元素對畫面的渲染效果
    - 在開發的時候，可以稍微想一下， DOM 要如何操作，搭配ELEMENT物件本身屬性與方法
      如果完成想要的功能，通常不會從最底建構，可能一個 ELEMENT 就是一個 Compoment
--------------------------------------------------------------------------------------
Document API（有時也稱為 DOM API）允許您以任何您想要的方式修改 DOM 樹。
1. 能夠從頭開始創建任何 HTML 或 XML 文檔
2. 更改給定 HTML 或 XML 文檔的任何內容(文字 textContent 也算一個元素)
3. 可以使用 JavaScript 來編輯文檔的 DOM，與因為轉換成可操作物件(標籤物件)
   就可訪問包括全局物件與 HTML文檔裡轉換物件的屬性。
--------------------------------------------------------------------------------------
----------------------------------------- 2023/08/23
html and css 的練習
https://www.geeksforgeeks.org/top-10-projects-for-beginners-to-practice-html-and-css-skills/ 純 css 與 html
https:www.geeksforgeeks.org/top-10-front-end-web-development-projects-for-beginners 前端入門專案
把基礎課程學完之後，就開始一直做小專案、一直做小專案，慢慢累積足夠多的 html 跟 css 知識，慢慢就會滿足常用的 80%，期間可以慢慢轉到 css
